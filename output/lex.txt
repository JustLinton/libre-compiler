SYM	NAME
==========
K_VAR	var
ID	x
D_COMMA	,
ID	y
D_COMMA	,
ID	z
D_COMMA	,
ID	q
D_COMMA	,
ID	r
D_COMMA	,
ID	n
D_COMMA	,
ID	f
D_SEMICOLON	;
K_PROCEDURE	procedure
ID	multiply
D_SEMICOLON	;
K_VAR	var
ID	a
D_COMMA	,
ID	b
D_SEMICOLON	;
K_BEGIN	begin
ID	a
O_ASSIGN	:=
ID	x
D_SEMICOLON	;
ID	b
O_ASSIGN	:=
ID	y
D_SEMICOLON	;
ID	z
O_ASSIGN	:=
ID	x
O_MULTI	*
ID	y
K_END	end
D_SEMICOLON	;
K_PROCEDURE	procedure
ID	divide
D_SEMICOLON	;
K_VAR	var
ID	w
D_SEMICOLON	;
K_BEGIN	begin
ID	r
O_ASSIGN	:=
ID	x
D_SEMICOLON	;
ID	q
O_ASSIGN	:=
NUM	0
D_SEMICOLON	;
ID	w
O_ASSIGN	:=
ID	y
D_SEMICOLON	;
K_WHILE	while
ID	w
O_LEQ	<=
ID	r
K_DO	do
ID	w
O_ASSIGN	:=
NUM	2
O_MULTI	*
ID	w
D_SEMICOLON	;
K_WHILE	while
ID	w
O_GTR	>
ID	y
K_DO	do
K_BEGIN	begin
ID	q
O_ASSIGN	:=
NUM	2
O_MULTI	*
ID	q
D_SEMICOLON	;
ID	w
O_ASSIGN	:=
ID	w
O_DIV	/
NUM	2
D_SEMICOLON	;
K_IF	if
ID	w
O_LEQ	<=
ID	r
K_THEN	then
K_BEGIN	begin
ID	r
O_ASSIGN	:=
ID	r
O_MINUS	-
ID	w
D_SEMICOLON	;
ID	q
O_ASSIGN	:=
ID	q
O_PLUS	+
NUM	1
K_END	end
K_END	end
K_END	end
D_SEMICOLON	;
K_PROCEDURE	procedure
ID	gcd
D_SEMICOLON	;
K_VAR	var
ID	g
D_SEMICOLON	;
K_BEGIN	begin
ID	f
O_ASSIGN	:=
ID	x
D_SEMICOLON	;
ID	g
O_ASSIGN	:=
ID	y
D_SEMICOLON	;
K_WHILE	while
ID	f
O_NEQ	#
ID	g
K_DO	do
K_BEGIN	begin
K_IF	if
ID	f
O_LESS	<
ID	g
K_THEN	then
ID	g
O_ASSIGN	:=
ID	g
O_MINUS	-
ID	f
D_SEMICOLON	;
K_IF	if
ID	g
O_LESS	<
ID	f
K_THEN	then
ID	f
O_ASSIGN	:=
ID	f
O_MINUS	-
ID	g
K_END	end
D_SEMICOLON	;
ID	z
O_ASSIGN	:=
ID	f
K_END	end
D_SEMICOLON	;
K_PROCEDURE	procedure
ID	fact
D_SEMICOLON	;
K_BEGIN	begin
K_IF	if
ID	n
O_GTR	>
NUM	1
K_THEN	then
K_BEGIN	begin
ID	f
O_ASSIGN	:=
ID	n
O_MULTI	*
ID	f
D_SEMICOLON	;
ID	n
O_ASSIGN	:=
ID	n
O_MINUS	-
NUM	1
D_SEMICOLON	;
K_CALL	call
ID	fact
K_END	end
K_END	end
D_SEMICOLON	;
K_BEGIN	begin
K_READ	read
D_LP	(
ID	x
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	y
D_RP	)
D_SEMICOLON	;
K_CALL	call
ID	multiply
D_SEMICOLON	;
K_WRITE	write
D_LP	(
ID	z
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	x
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	y
D_RP	)
D_SEMICOLON	;
K_CALL	call
ID	divide
D_SEMICOLON	;
K_WRITE	write
D_LP	(
ID	q
D_RP	)
D_SEMICOLON	;
K_WRITE	write
D_LP	(
ID	r
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	x
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	y
D_RP	)
D_SEMICOLON	;
K_CALL	call
ID	gcd
D_SEMICOLON	;
K_WRITE	write
D_LP	(
ID	z
D_RP	)
D_SEMICOLON	;
K_READ	read
D_LP	(
ID	n
D_RP	)
D_SEMICOLON	;
ID	f
O_ASSIGN	:=
NUM	1
D_SEMICOLON	;
K_CALL	call
ID	fact
D_SEMICOLON	;
K_WRITE	write
D_LP	(
ID	f
D_RP	)
K_END	end
D_PERIOD	.
